usethis::create_package(".")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
# 使用 iris 数据集进行示例
data(iris)
ridge_model <- ridgereg(Petal.Length ~ Species, data = iris, lambda = 1)
# 打印模型信息
print(ridge_model)
# 获取预测值
predicted_values <- predict(ridge_model)
# 获取回归系数
ridge_coefficients <- coef(ridge_model)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/R_group3/Four/R/linreg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data(iris)
mod_object <- lm(Petal.Length~Species, data = iris)
print(mod_object)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
# 首先，确保你已经加载了 iris 数据集
data(iris)
# 使用 ridgereg_fit 函数拟合岭回归模型
# 这里我们将 Petal.Length 作为因变量，Species 作为自变量
model <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data(iris)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
my_ridgereg$new()
my_ridgereg <- ridgereg$new()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
my_ridgereg <- ridgereg$new()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
my_ridgereg <- ridgereg$new()
data("iris")
my_ridgereg$caculation(Petal.Length~Species, data, 0.1)
my_ridgereg$calculation(Petal.Length~Species, data, 0.1)
my_ridgereg$calculation(Petal.Length~Species, iris, 0.1)
data("iris")
my_ridgereg <- ridgereg$new(Petal.Length~Species, iris, 0.1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
View(iris)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.5)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 1)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = )
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 5)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.01)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.0001)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 20)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 200)
my_ridgereg$print()
library(devtools)
use_testthat()
install.packages("MASS")
library(MASS)
lm.ridge(Petal.Length ~ Petal.Width, data = iris, lambda = 0.1)
str(iris)
install.packages("glmet")
source("~/WorkSpace/git/linreg/tests/testthat/test_ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, iris, 0.1)
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, iris, 0.1)
my_ridgereg$print()
# 计算不同 Species 的均值
aggregate(Petal.Length ~ Species, data = iris, FUN = mean)
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, iris, 0.1)
my_ridgereg$print()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, iris, 0.1)
my_ridgereg$print()
devtools::load_all(".")
rm(list = c("ridgereg_fit"))
devtools::load_all(".")
devtools::document()
devtools::build()
devtools::reload()
devtools::document()
usethis::use_github_action("check-standard")
source("~/.active-rstudio-document")
install.packages("nycflights13")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# 安装必要的包（如果尚未安装）
# install.packages(c("nycflights13", "dplyr", "ggplot2"))
# 加载必要的包
library(nycflights13)
library(dplyr)
library(ggplot2)
# 创建可视化函数
visualize_airport_delays <- function() {
# 数据处理：计算每个机场的平均延误
airport_delays <- flights %>%
filter(!is.na(arr_delay)) %>%
group_by(dest) %>%
summarise(mean_delay = mean(arr_delay, na.rm = TRUE), .groups = 'drop') %>%
left_join(airports, by = c("dest" = "faa")) %>%
filter(!is.na(lon) & !is.na(lat))
# 打印处理后的数据以进行调试，显示前20行
print(airport_delays, n = 20)
# 绘制可视化
ggplot(data = airport_delays, aes(x = lon, y = lat, size = mean_delay)) +
geom_point(alpha = 0.5) +
scale_size_continuous(range = c(1, 10), name = "Mean Arrival Delay (minutes)") +
labs(title = "Mean Arrival Delays by Airport",
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
# 调用可视化函数
visualize_airport_delays()
source("~/WorkSpace/git/linreg/R/visualize airport delays.R")
visualize_airport_delays()
source("~/WorkSpace/git/linreg/R/visualize airport delays.R")
visualize_airport_delays()
usethis::use_vignette("ridgereg")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
source("~/WorkSpace/git/linreg/R/ridgereg.R")
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$print()
data("iris")
my_ridgereg <- ridgereg_fit(Petal.Length ~ Species, data = iris, lambda = 0.1)
my_ridgereg$predict()
my_ridgereg$coef()
install.packages("packageName")
devtools::load_all(".")
rm(list = c("ridgereg_fit"))
devtools::load_all(".")
devtools::document()
library(roxygen2)
devtools::document()
devtools::build()
install.packages("packageName")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
devtools::document()
devtools::build()
rm(list = c("ridgereg_fit"))
source("~/WorkSpace/git/linreg/R/ridgereg.R")
devtools::document()
devtools::build()
devtools::reload()
rm(list = c("ridgereg_fit"))
devtools::document()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
devtools::document()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
m(list = c("ridgereg_fit"))
rm(list = c("ridgereg_fit"))
devtools::document()
source("~/WorkSpace/git/linreg/R/ridgereg.R")
devtools::document()
rm(list = c("ridgereg_fit"))
devtools::document()
devtools::build()
devtools::reload()
devtools::load_all(".")
devtools::install_github("qinxia123/linreg")
devtools::install_github("qinxia123/linreg")
force = TRUE
